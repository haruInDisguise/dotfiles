#!/usr/bin/sh

# A small script for controlling a running ncspot instance.
# For now, all this script implements is a "quick search and play"
# feature
# TODO: Error handeling for curl requests and json parsing
# TODO: Rewrite this script in nushell

LOG_NAME="spotfiy"
. "$DOTFILES_ROOT/lib/log.sh"

# Defines:
# NCSPOT_USER_CONFIGURATION_PATH
# NCSPOT_USER_CACHE_PATH
# NCSPOT_USER_RUNTIME_PATH
# Unused
#eval $(ncspot info | sed -E 's/([A-Z_]*)\s(.*)/NCSPOT_\1=\2/')
# Buffer to store function results. This allows me to use logging without clobbering the return values
RESULT_BUFFER=""
CREDENTIALS_PATH="$XDG_RUNTIME_DIR/dotfiles/spotify_credentials.json"

# Authentication method for simple CLI applications. Requires user authentication for token renewal
# https://developer.spotify.com/documentation/web-api/tutorials/client-credentials-flow
auth_token_is_valid() {
    [ -r "$CREDENTIALS_PATH" ] || return 1
    local time_file="$(date --reference "$CREDENTIALS_PATH" +%s)"
    local time_now="$(date +%s)"
    local time_expire="$(jq --raw-output '.expires_in' "$CREDENTIALS_PATH")"
    # NOTE: Considering request times, it might be reasonable to assume
    # that the token is no longer valid, even though the expiration
    # preiod did not run out yet.
    # I just reduce the expire time by a few seconds (abitrary) to make
    # sure that requests always contain a valid token.
    local diff="$(( time_now - time_file ))"
    log_debug "Remaining auth time: $diff sec"
    return $(( diff > ( time_expire - 2 ) ))
}

auth_token_update() {
    local client_id="$(pass web/spotify/hook_client_id)"
    local client_secret="$(pass web/spotify/hook_client_secret)"
    local token=$(echo -n "$client_id:$client_secret" | openssl base64 -A)

    log_debug "Quering 'api/token' endpoint"
    "$HOME/.local/src/curl/build/src/curl" \
        --silent \
        --request POST \
        --data 'grant_type=client_credentials' \
        --header 'Content-Type: application/x-www-form-urlencoded' \
        --header "Authorization: Basic $token" \
        --output "$CREDENTIALS_PATH" \
        'https://accounts.spotify.com/api/token'
}

spotify_search() {
    local access_token="${1:?Missing access token}"; shift
    local query="${@:?Missing query}"

    log_debug "Quering 'api/search' endpoint"
    RESULT_BUFFER=$( \
        "$HOME/.local/src/curl/build/src/curl" \
            --silent \
            --get \
            --data 'limit=4' \
            --data 'type=track' \
            --data 'offset=0' \
            --data-urlencode "q=$query" \
            --header "Authorization: Bearer $access_token" \
            'https://api.spotify.com/v1/search'\
        )
}

print_track_info() {
    local raw_json="${1:?Missing json input}"
    local track_title="$(echo $raw_json | jq --raw-output '.name')"
    local track_artist="$(echo $raw_json | jq --raw-output '.artists[].name')"
    log_info "Playing: $track_artist - $track_title"
}

run_search() {
    if [ ! -S "$XDG_RUNTIME_DIR/ncspot/ncspot.sock" ]; then
        log_error "Is ncspot running?"
        exit 1
    fi

    if (( $# == 0 )); then
        log_error "Missing argument: <search terms>"
        exit 1
    fi

    log_warn 'Using local curl build (8.9.0-DEV) to avoid a bug in version 8.8.0'
    if ! auth_token_is_valid; then
        log_info "Updating auth token"
        auth_token_update
    fi

    log_info "Search term: $@"
    local access_token="$(jq --raw-output '.access_token' "$CREDENTIALS_PATH")" $@
    spotify_search "$access_token" "$@"
    local track_json="$(echo $RESULT_BUFFER | jq --raw-output '.tracks.items[0]')"
    print_track_info "$track_json"
    local uri="$(echo "$RESULT_BUFFER" | jq --raw-output '.tracks.items[0].uri')"
    playerctl --player=ncspot open "$uri"
}

set -e
run_search $@
